.. _java-intepretor:

Java Interpretor
================
    - the "java" command executes Java class files created by a Java compiler, for instance, javac

    .. code-block:: python
       :linenos:

       % java java.lang.String

    - the classname argument is the name of the class to be executed
    - classname must be fully qualified by including its package in the name
    - java expects the binary representation of the class bo be in a file called classname.class which is generated by compiling the corresponding source file
    - all Java class files end with the filename extension ".class" which the compiler automatically adds when the class is compiled
    - classname must contain the static void main method

    .. code-block:: python
       :linenos:

       class Aclass {
           public static void main(String argv[]){ 
              . . .
           }
       }

    - java commands executes the main method and then exists unless main created one ore more threads.
    - if any threads are created by main then java doesn't exit until the last thread exists

    - The Java interpreter proceeds as follows: 
        - it finds the environment variable CLASSPATH (set via the operating system, and sometimes by the installation program that installs Java or
          a Java-based tool on your machine)

        - CLASSPATH contains one or more directories that are used as roots in a search for .class files.
        - Starting at that root, the interpreter will take the package name and replace each dot with a slash to generate a path name off of the 
          CLASSPATH root (so package foo.bar.baz becomes foo\bar\baz or foo/bar/baz or possibly something else, depending on your operating system)

        - This is then concatenated to the various entries in the CLASSPATH. That’s where it looks for the .class file with the name corresponding
          to the class you’re trying to create. (It also searches some standard directories relative to where the Java interpreter resides.)

:ref:`Go Back <java-jvm-label>`.