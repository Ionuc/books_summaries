.. _javascript-es2015-label:

ES2015
======
    - ECMAScript 2015 is an ECMAScript standard that was ratified in June 2015
    - it provides a major update to the language since ES5 was standardized in 2009

Arraws and Lexical This
-----------------------
    - arraws are a function shorthand using the "=>"
    - they are syntactically similar to the related feature in C#, JAva8, CoffeeScript
    - they support both expression and statement bodies
    - unlike functions, arrows share the same lexical "this" as their surrounding code
    - if an arrow is inside another function, it shared the "arguments" variable of its parent function

    .. code-block:: python
        :linenos:

        // Expression bodies
        var odds = evens.map(v => v + 1);
        var nums = evens.map((v, i) => v + i);

        // Statement bodies
        nums.forEach(v => {
            if (v % 5 === 0)
                fives.push(v);
        });

        // Lexical this
        var bob = {
            _name: "Bob",
            _friends: [],
            printFriends() {
                this._friends.forEach(f =>
                console.log(this._name + " knows " + f));
            }
        };

        // Lexical arguments
        function square() {
            let example = () => {
                let numbers = [];
                for (let number of arguments) {
                    numbers.push(number * number);
                }

                return numbers;
            };

            return example();
        }

        square(2, 4, 7.5, 8, 11.5, 21); // returns: [4, 16, 56.25, 64, 132.25, 441]


Classes
-------
    - are simple sugar over the prototype-based OO pattern
    - supports prototy-based inheritance, super calls, instance and static methods and constructors

    .. code-block:: python
        :linenos:

        class SkinnedMesh extends THREE.Mesh {
            constructor(geometry, materials) {
                super(geometry, materials);

                this.idMatrix = SkinnedMesh.defaultMatrix();
                this.bones = [];
                this.boneMatrices = [];
                //...
            }
            update(camera) {
                //...
                super.update();
            }
            static defaultMatrix() {
                return new THREE.Matrix4();
            }
        }

Enhanced Object Literals
------------------------
    - object literals are extended:
        - to support setting the prototype at construction
        - shorthand for "foo: foo" assignments
        - defining methods
        - making super calls

    .. code-block:: python
        :linenos:

        var obj = {
            // Sets the prototype. "__proto__" or '__proto__' would also work.
            __proto__: theProtoObj,
            // Computed property name does not set prototype or trigger early error for
            // duplicate __proto__ properties.
            ['__proto__']: somethingElse,
            // Shorthand for ‘handler: handler’
            handler,
            // Methods
            toString() {
             // Super calls
             return "d " + super.toString();
            },
            // Computed (dynamic) property names
            [ "prop_" + (() => 42)() ]: 42
        };

Template Strings
----------------
    - provides syntactic sugar for constructing strings
    - is similar to string interpolation
    - a tag can be added to allow the string construction to be customized, avoiding injection attacks or constrcting higher level data structures
      from string contents

    .. code-block:: python
        :linenos:

        // Basic literal string creation
        `This is a pretty little template string.`

        // Multiline strings
        `In ES5 this is
         not legal.`

        // Interpolate variable bindings
        var name = "Bob", time = "today";
        `Hello ${name}, how are you ${time}?`

        // Unescaped template strings
        String.raw`In ES5 "\n" is a line-feed.`

        // Construct an HTTP request prefix is used to interpret the replacements and construction
        GET`http://foo.org/bar?a=${a}&b=${b}
            Content-Type: application/json
            X-Credentials: ${credentials}
            { "foo": ${foo},
              "bar": ${bar}}`(myOnReadyStateChangeHandler);

Destructuring
-------------
    - destructuring allows binding using pattern matching, with support for matching arrays and objects
    - destructuring is fail-soft, similar to standard object lookup "foo['bar']", producing undefined values when not found

    .. code-block:: python
        :linenos:

        // list matching
        var [a, ,b] = [1,2,3];
        a === 1;
        b === 3;

        // object matching
        var { op: a, lhs: { op: b }, rhs: c }
               = getASTNode()

        // object matching shorthand
        // binds `op`, `lhs` and `rhs` in scope
        var {op, lhs, rhs} = getASTNode()

        // Can be used in parameter position
        function g({name: x}) {
          console.log(x);
        }
        g({name: 5})

        // Fail-soft destructuring
        var [a] = [];
        a === undefined;

        // Fail-soft destructuring with defaults
        var [a = 1] = [];
        a === 1;

        // Destructuring + defaults arguments
        function r({x, y, w = 10, h = 10}) {
          return x + y + w + h;
        }
        r({x:1, y:2}) === 23


Default + Rest + Spread
-----------------------
    - callee-evaluated default parameter values
    - turn an array into consecutive arguments in a function call
    - bind trailing parameters to an array
    - rest replaces the need for "arguments" and addresses common cases more directly

    .. code-block:: python
        :linenos:

        function f(x, y=12) {
            // y is 12 if not passed (or passed as undefined)
            return x + y;
        }
        f(3) == 15

    .. code-block:: python
        :linenos:

        function f(x, ...y) {
            // y is an Array
            return x * y.length;
        }
        f(3, "hello", true) == 6

    .. code-block:: python
        :linenos:

        function f(x, y, z) {
            return x + y + z;
        }
        // Pass each elem of array as argument
        f(...[1,2,3]) == 6

Let + Const
-----------
    - block-scoped binding constructs
    - "let" is the new "var"
    - "const" is single-assignment
    - static restrictions prevent use before assignment

    .. code-block:: python
        :linenos:

        function f() {
            {
                let x;
                {
                    // this is ok since it's a block scoped name
                    const x = "sneaky";
                    // error, was just defined with `const` above
                    x = "foo";
                }
                // this is ok since it was declared with `let`
                x = "bar";
                // error, already declared above in this block
                let x = "inner";
            }
        }

Iterators + For..Of
-------------------
    - iterator objects enable coustom iteration like CLR IEnumerable of Java Iterable
    - generalize "for..in" to custom interator-based iteration with "for..of"
    - don't require realizing an array, enabling lazy design patterns like LINQ

    .. code-block:: python
        :linenos:

        let fibonacci = {
            [Symbol.iterator]() {
                let pre = 0, cur = 1;
                return {
                    next() {
                        [pre, cur] = [cur, pre + cur];
                        return { done: false, value: cur }
                    }
                }
            }
        }

        for (var n of fibonacci) {
            // truncate the sequence at 1000
            if (n > 1000)
                break;
            console.log(n);
        }

    - iteration is based on these duck-typed interfaces ( using TypeScript type syntax)

    .. code-block:: python
        :linenos:

        interface IteratorResult {
            done: boolean;
            value: any;
        }
        interface Iterator {
            next(): IteratorResult;
        }
        interface Iterable {
            [Symbol.iterator](): Iterator
        }

Generators
----------
    - generators simplify iterator-authoring using "function*" and "yield"
    - a function declared as "function*" returns a Generator instance
    - generators are subtype of iterators which include additional "next" and "throw"
    - these enable values to flow back into the generator, so "yield" is an expression form which returns a value (or throws)

    .. code-block:: python
        :linenos:

        var fibonacci = {
            [Symbol.iterator]: function*() {
                var pre = 0, cur = 1;
                for (;;) {
                    var temp = pre;
                    pre = cur;
                    cur += temp;
                    yield cur;
                }
            }
        }

        for (var n of fibonacci) {
            // truncate the sequence at 1000
            if (n > 1000)
                break;
            console.log(n);
        }

    - the generator interface is (using TypeScript)

    .. code-block:: python
        :linenos:

        interface Generator extends Iterator {
            next(value?: any): IteratorResult;
            throw(exception: any);
        }

Modules
-------
    - language-level support for modules for component definition
    - codifies patterns from popular JavaScript module loaders (AMD, CommonJS)
    - runtime behavior defined by a host-defined default loader
    - implicitly async model- no code executes untile requested modules are available and processed


    .. code-block:: python
        :linenos:

        // lib/math.js
        export function sum(x, y) {
            return x + y;
        }
        export var pi = 3.141593;

    .. code-block:: python
        :linenos:

        // app.js
        import * as math from "lib/math";
        console.log("2π = " + math.sum(math.pi, math.pi));

    .. code-block:: python
        :linenos:

        // otherApp.js
        import {sum, pi} from "lib/math";
        console.log("2π = " + sum(pi, pi));

    .. code-block:: python
        :linenos:

        // lib/mathplusplus.js
        export * from "lib/math";
        export var e = 2.71828182846;
        export default function(x) {
            return Math.exp(x);
        }

Module Loaders
--------------
    - suports:
        - dynamic loading
        - state isolation
        - global namespace isolation
        - compilation hooks
        - nested virtualization

    .. code-block:: python
        :linenos:

        // Dynamic loading – ‘System’ is default loader
        System.import("lib/math").then(function(m) {
            alert("2π = " + m.sum(m.pi, m.pi));
        });

        // Create execution sandboxes – new Loaders
        var loader = new Loader({
            global: fixup(window) // replace ‘console.log’
        });
        loader.eval("console.log(\"hello world!\");");

        // Directly manipulate module cache
        System.get("jquery");
        System.set("jquery", Module({$: $})); // WARNING: not yet finalized

Map + Set + WeakMap + WeakSet
-----------------------------
    - efficient data structures for common algorithms
    - WeakMaps provide leak-free object-key'd side tables

    .. code-block:: python
        :linenos:

        // Sets
        var s = new Set();
        s.add("hello").add("goodbye").add("hello");
        s.size === 2;
        s.has("hello") === true;

        // Maps
        var m = new Map();
        m.set("hello", 42);
        m.set(s, 34);
        m.get(s) == 34;

        // Weak Maps
        var wm = new WeakMap();
        wm.set(s, { extra: 42 });
        wm.size === undefined

        // Weak Sets
        var ws = new WeakSet();
        ws.add({ data: 42 });
        // Because the added object has no other references, it will not be held in the set

Proxies
-------
    - proxies enable creation of objects with the full range of behaviors available to host objects
    - can be used for interception, object virtualization, logging/profiling, etc

    .. code-block:: python
        :linenos:

        // Proxying a normal object
        var target = {};
        var handler = {
            get: function (receiver, name) {
                return `Hello, ${name}!`;
            }
        };

        var p = new Proxy(target, handler);
        p.world === "Hello, world!";

    .. code-block:: python
        :linenos:

        // Proxying a function object
        var target = function () { return "I am the target"; };
        var handler = {
            apply: function (receiver, ...args) {
                return "I am the proxy";
            }
        };

        var p = new Proxy(target, handler);
        p() === "I am the proxy";

    .. code-block:: python
        :linenos:

        var handler =
        {
            // target.prop
            get: ...,
            // target.prop = value
            set: ...,
            // 'prop' in target
            has: ...,
            // delete target.prop
            deleteProperty: ...,
            // target(...args)
            apply: ...,
            // new target(...args)
            construct: ...,
            // Object.getOwnPropertyDescriptor(target, 'prop')
            getOwnPropertyDescriptor: ...,
            // Object.defineProperty(target, 'prop', descriptor)
            defineProperty: ...,
            // Object.getPrototypeOf(target), Reflect.getPrototypeOf(target),
            // target.__proto__, object.isPrototypeOf(target), object instanceof target
            getPrototypeOf: ...,
            // Object.setPrototypeOf(target), Reflect.setPrototypeOf(target)
            setPrototypeOf: ...,
            // for (let i in target) {}
            enumerate: ...,
            // Object.keys(target)
            ownKeys: ...,
            // Object.preventExtensions(target)
            preventExtensions: ...,
            // Object.isExtensible(target)
            isExtensible :...
        }

Symbols
-------
    - symbols enable access control for object state
    - symbols allow properties to be keyed by either "string" or "symbol"
    - are a new primitive types
    - optional "name" parameter used in debugging, but is not part of identity
    - are unique ( like gensym), but not private since they are exposed via reflection features like "Object.getOwnPropertysymbols".

    .. code-block:: python
        :linenos:

        (function() {
            // module scoped symbol
            var key = Symbol("key");

            function MyClass(privateData) {
                this[key] = privateData;
            }

            MyClass.prototype = {
                doStuff: function() {
                    ... this[key] ...
                }
            };

            // Limited support from Babel, full support requires native implementation.
            typeof key === "symbol"
        })();

        var c = new MyClass("hello")
        c["key"] === undefined

Sublassable build-ins
---------------------
    - build-ins like "Array", "Date" and DOM "Element" can be subclassed

    .. code-block:: python
        :linenos:

        // User code of Array subclass
        class MyArray extends Array {
            constructor(...args) { super(...args); }
        }

        var arr = new MyArray();
        arr[1] = 12;
        arr.length == 2

Math + Number + String + Object APIs
------------------------------------
    - many new library additions, including core Math libraries, Array conversion helpers and Object.assign for copying

    .. code-block:: python
        :linenos:

        Number.EPSILON
        Number.isInteger(Infinity) // false
        Number.isNaN("NaN") // false

        Math.acosh(3) // 1.762747174039086
        Math.hypot(3, 4) // 5
        Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2

        "abcde".includes("cd") // true
        "abc".repeat(3) // "abcabcabc"

        Array.from(document.querySelectorAll("*")) // Returns a real Array
        Array.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior
        [0, 0, 0].fill(7, 1) // [0,7,7]
        [1,2,3].findIndex(x => x == 2) // 1
        ["a", "b", "c"].entries() // iterator [0, "a"], [1,"b"], [2,"c"]
        ["a", "b", "c"].keys() // iterator 0, 1, 2
        ["a", "b", "c"].values() // iterator "a", "b", "c"

        Object.assign(Point, { origin: new Point(0,0) })

Binary and Octal Literals
-------------------------
    - two new numeric litarl forms are added for binary (b) and octal (o)

    .. code-block:: python
        :linenos:

        0b111110111 === 503 // true
        0o767 === 503 // true

Promises
--------
    - promises are a library for asynchronous programminh
    - primises are a first class representation of a value that may be made available in the future

    .. code-block:: python
        :linenos:

        function timeout(duration = 0) {
            return new Promise((resolve, reject) => {
                setTimeout(resolve, duration);
            })
        }

        var p = timeout(1000).then(() => {
            return timeout(2000);
        }).then(() => {
            throw new Error("hmm");
        }).catch(err => {
            return Promise.all([timeout(100), timeout(200)]);
        })

Reflect API
-----------
    - full refelction API exposing the runtime-level meta-opertion on objects
    - this is effectively the inverse of the Proxy API
    - allow making calls corresponding to the same meta-operations as the proxy traps
    - expecially useful for implementing proxies

    .. code-block:: python
        :linenos:

        var O = {a: 1};
        Object.defineProperty(O, 'b', {value: 2});
        O[Symbol('c')] = 3;

        Reflect.ownKeys(O); // ['a', 'b', Symbol(c)]

        function C(a, b){
          this.c = a + b;
        }
        var instance = Reflect.construct(C, [20, 22]);
        instance.c; // 42

Tail Calls
----------
    - calls in tail-position are guaranteed to not grow the stack unboundedly
    - makes recursive algorithms safe in the face of unbounded inputs

    .. code-block:: python
        :linenos:

        function factorial(n, acc = 1) {
            "use strict";
            if (n <= 1) return acc;
            return factorial(n - 1, n * acc);
        }

        // Stack overflow in most implementations today,
        // but safe on arbitrary inputs in ES2015
        factorial(100000)

:ref:`Go Back <javascript-label>`.